{
  "name": "Speech Processing Subflow",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Function Node: OpenAI Extraction Prompt\nconst speechResult = $json.speechResult;\n\nconst systemPrompt = `You are a construction contract specialist. Extract project metadata from voice messages into structured JSON. Only return valid JSON, no explanations.\n\nRequired fields to extract:\n- business_name: Company name (string)\n- project_type: Type of project (string)\n- project_address: Full address (string)\n- scope: Project description (string)\n- budget: Total cost (string with $)\n- payment_terms: Payment structure (string)\n- materials_by: \"client\" or \"contractor\" (string)\n- license_number: GC license if mentioned (string or null)\n- start_date: Project start date (string or null)\n- end_date: Project end date (string or null)\n- preferred_contact_method: \"SMS\" or \"email\" (string or null)\n\nRules:\n- If field not mentioned, use null\n- Keep original wording for addresses and scope\n- Extract dollar amounts as \"$X,XXX\" format\n- Payment terms as \"X%/Y%/Z% split\" or \"monthly\" etc.\n- Dates as \"Month Day\" or \"Month Year\" format`;\n\nconst userPrompt = `Extract project metadata from this voice message:\n\n\"${speechResult}\"\n\nReturn only valid JSON with the required fields.`;\n\nreturn {\n  systemPrompt,\n  userPrompt,\n  temperature: 0.1,\n  maxTokens: 500,\n  speechResult: speechResult\n};"
      },
      "id": "openai-prompt",
      "name": "OpenAI Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "authentication": "apiKey",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "={{ $json.systemPrompt }}"
            },
            {
              "role": "user",
              "content": "={{ $json.userPrompt }}"
            }
          ]
        },
        "options": {
          "temperature": "={{ $json.temperature }}",
          "maxTokens": "={{ $json.maxTokens }}"
        }
      },
      "id": "openai-extraction",
      "name": "OpenAI Extraction",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function Node: Follow-Up Logic\nconst extractedData = $json.message.content;\nconst speechResult = $json.speechResult;\n\n// Parse OpenAI response\nlet parsedData;\ntry {\n  parsedData = JSON.parse(extractedData);\n} catch (error) {\n  return {\n    error: 'PARSE_ERROR',\n    message: 'Failed to parse OpenAI response',\n    originalResponse: extractedData\n  };\n}\n\n// Priority order for missing fields\nconst missingFields = [];\n\nif (!parsedData.business_name) {\n  missingFields.push('business_name');\n}\n\nif (!parsedData.project_type) {\n  missingFields.push('project_type');\n}\n\nif (!parsedData.project_address) {\n  missingFields.push('project_address');\n}\n\nif (!parsedData.budget) {\n  missingFields.push('budget');\n}\n\nif (!parsedData.payment_terms) {\n  missingFields.push('payment_terms');\n}\n\nif (!parsedData.start_date) {\n  missingFields.push('start_date');\n}\n\nif (!parsedData.preferred_contact_method) {\n  missingFields.push('preferred_contact_method');\n}\n\n// Smart follow-up questions\nconst followUpQuestions = {\n  business_name: \"What's the name of your business?\",\n  project_type: \"What type of project is this? (e.g., kitchen remodel, bathroom renovation, deck build)\",\n  project_address: \"What's the project address?\",\n  budget: \"What's the total budget for this project?\",\n  payment_terms: \"How would you like to structure the payments? (e.g., 50% upfront, 50% on completion)\",\n  start_date: \"When would you like to start this project?\",\n  preferred_contact_method: \"What's the best way to get the contract to you — text or email?\"\n};\n\n// Special logic for dates\nif (speechResult && speechResult.toLowerCase().includes(\"next month\")) {\n  followUpQuestions.start_date = \"Should we put the 1st of next month or leave it blank for you to fill in later?\";\n}\n\nif (speechResult && speechResult.toLowerCase().includes(\"asap\")) {\n  followUpQuestions.start_date = \"Would you like to start within the next week, or do you have a specific date in mind?\";\n}\n\n// Return the highest priority missing field question\nif (missingFields.length > 0) {\n  const nextField = missingFields[0];\n  return {\n    hasFollowUp: true,\n    question: followUpQuestions[nextField],\n    missingField: nextField,\n    remainingFields: missingFields.slice(1),\n    extractedData: parsedData,\n    conversationState: 'follow_up'\n  };\n}\n\n// Check for compliance warnings\nconst complianceWarnings = [];\nif (!parsedData.license_number && parsedData.business_name) {\n  complianceWarnings.push(\"Missing: GC License Number\");\n}\n\nif (parsedData.payment_terms && parsedData.payment_terms.includes(\"50%\") && parsedData.payment_terms.includes(\"upfront\")) {\n  complianceWarnings.push(\"⚠️ CSLB payment structure may be unclear\");\n}\n\nreturn {\n  hasFollowUp: false,\n  isComplete: true,\n  complianceWarnings,\n  extractedData: parsedData,\n  conversationState: 'complete'\n};"
      },
      "id": "follow-up-logic",
      "name": "Follow-Up Logic",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    }
  ],
  "connections": {
    "OpenAI Prompt": {
      "main": [
        [
          {
            "node": "OpenAI Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Extraction": {
      "main": [
        [
          {
            "node": "Follow-Up Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["speech-processing", "openai"],
  "triggerCount": 0,
  "updatedAt": "2025-01-15T10:00:00.000Z",
  "versionId": "1"
} 