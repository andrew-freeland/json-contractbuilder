{
  "name": "Build Scope Summary",
  "type": "n8n-nodes-base.function",
  "parameters": {
    "functionCode": "// Function Node: Build Scope Summary\n// Input: $json.extractedData or $json (project data)\n// Output: Formatted scope summary and project details\n\nconst projectData = $json.extractedData || $json;\nconst callSid = projectData.callSid;\n\n// Scope summary builder\nconst buildScopeSummary = (data) => {\n  const parts = [];\n  \n  // Project type\n  if (data.project_type || data.projectType) {\n    const projectType = data.project_type || data.projectType;\n    parts.push(projectType.charAt(0).toUpperCase() + projectType.slice(1));\n  }\n  \n  // Location\n  if (data.project_address || data.projectAddress) {\n    const address = data.project_address || data.projectAddress;\n    parts.push(`at ${address}`);\n  }\n  \n  // Budget\n  if (data.budget) {\n    const budget = data.budget.startsWith('$') ? data.budget : `$${data.budget}`;\n    parts.push(`budget ${budget}`);\n  }\n  \n  // Timeline\n  if (data.start_date || data.startDate) {\n    const startDate = data.start_date || data.startDate;\n    parts.push(`starting ${startDate}`);\n  }\n  \n  // Materials\n  if (data.materials_by || data.materialsProvidedBy) {\n    const materials = data.materials_by || data.materialsProvidedBy;\n    parts.push(`materials by ${materials}`);\n  }\n  \n  return parts.length > 0 ? parts.join(', ') + '.' : 'Project details pending.';\n};\n\n// Generate detailed project summary\nconst generateDetailedSummary = (data) => {\n  const summary = {\n    projectType: data.project_type || data.projectType || 'Not specified',\n    address: data.project_address || data.projectAddress || 'Not provided',\n    scope: data.scope || data.scopeOfWork || 'Not provided',\n    budget: data.budget || 'Not specified',\n    paymentTerms: data.payment_terms || data.paymentTerms || 'Not specified',\n    startDate: data.start_date || data.startDate || 'Not specified',\n    endDate: data.end_date || data.endDate || 'Not specified',\n    materialsBy: data.materials_by || data.materialsProvidedBy || 'Not specified',\n    contactMethod: data.preferred_contact_method || data.preferredContactMethod || 'Not specified',\n    businessName: data.business_name || data.clientName || 'Not provided'\n  };\n  \n  // Format budget for display\n  if (summary.budget && !summary.budget.startsWith('$')) {\n    summary.budget = `$${summary.budget}`;\n  }\n  \n  // Format payment terms\n  if (summary.paymentTerms) {\n    summary.paymentTerms = summary.paymentTerms.replace(/(\\d+)%/g, '$1%');\n  }\n  \n  return summary;\n};\n\n// Generate SMS-friendly summary (160 char limit)\nconst generateSMSSummary = (data) => {\n  const parts = [];\n  \n  // Business name (truncated if needed)\n  const business = data.business_name || data.clientName || 'New Client';\n  parts.push(business.length > 20 ? business.substring(0, 17) + '...' : business);\n  \n  // Project type\n  const projectType = data.project_type || data.projectType || 'Project';\n  parts.push(projectType);\n  \n  // Address (truncated)\n  const address = data.project_address || data.projectAddress || 'Address pending';\n  parts.push(address.length > 30 ? address.substring(0, 27) + '...' : address);\n  \n  // Budget\n  const budget = data.budget || 'Budget pending';\n  parts.push(budget);\n  \n  // Contact method\n  const contact = data.preferred_contact_method || data.preferredContactMethod || 'Contact pending';\n  parts.push(contact);\n  \n  let smsText = parts.join('\\n');\n  \n  // Add compliance warnings if any\n  if (data.complianceWarnings && data.complianceWarnings.length > 0) {\n    smsText += '\\n⚠️ Review required';\n  }\n  \n  // Add call ID\n  smsText += `\\nID: ${callSid || 'N/A'}`;\n  \n  // Ensure we don't exceed 160 characters\n  if (smsText.length > 160) {\n    smsText = smsText.substring(0, 157) + '...';\n  }\n  \n  return smsText;\n};\n\n// Generate email summary\nconst generateEmailSummary = (data) => {\n  const summary = generateDetailedSummary(data);\n  \n  return `New Construction Contract Request\n\nCall Details:\n- Call ID: ${callSid || 'N/A'}\n- Timestamp: ${new Date().toLocaleString()}\n- Caller Phone: ${data.callerPhone || data.From || 'N/A'}\n\nBusiness Information:\n- Business Name: ${summary.businessName}\n- Contact Method: ${summary.contactMethod}\n- Returning Customer: ${data.isReturningCaller || data.is_Repeat ? 'Yes' : 'No'}\n\nProject Details:\n- Project Type: ${summary.projectType}\n- Address: ${summary.address}\n- Scope: ${summary.scope}\n- Budget: ${summary.budget}\n- Payment Terms: ${summary.paymentTerms}\n- Materials By: ${summary.materialsBy}\n- Start Date: ${summary.startDate}\n- End Date: ${summary.endDate}\n\nScope Summary:\n${buildScopeSummary(data)}\n\n${data.complianceWarnings && data.complianceWarnings.length > 0 ? \n`Compliance Warnings:\n${data.complianceWarnings.join('\\n')}\n\n` : ''}Next Steps:\n1. Review project details\n2. Generate contract document\n3. Send to customer via ${summary.contactMethod}\n4. Follow up within 24 hours`;\n};\n\n// Generate contract summary for document generation\nconst generateContractSummary = (data) => {\n  const summary = generateDetailedSummary(data);\n  \n  return {\n    projectOverview: buildScopeSummary(data),\n    detailedScope: summary.scope,\n    financialSummary: {\n      budget: summary.budget,\n      paymentTerms: summary.paymentTerms\n    },\n    timeline: {\n      startDate: summary.startDate,\n      endDate: summary.endDate\n    },\n    materials: summary.materialsBy,\n    contactInfo: {\n      businessName: summary.businessName,\n      contactMethod: summary.contactMethod\n    }\n  };\n};\n\n// Generate notification payload\nconst generateNotificationPayload = (data) => {\n  const summary = generateDetailedSummary(data);\n  \n  return {\n    callSid: callSid,\n    timestamp: new Date().toISOString(),\n    caller: {\n      phone: data.callerPhone || data.From,\n      business: summary.businessName,\n      contactMethod: summary.contactMethod,\n      isReturning: data.isReturningCaller || data.is_Repeat\n    },\n    project: {\n      type: summary.projectType,\n      address: summary.address,\n      scope: summary.scope,\n      budget: summary.budget,\n      paymentTerms: summary.paymentTerms,\n      materialsBy: summary.materialsBy,\n      startDate: summary.startDate,\n      endDate: summary.endDate\n    },\n    compliance: {\n      warnings: data.complianceWarnings || [],\n      licenseNumber: data.license_number || data.licenseNumber\n    },\n    scopeSummary: buildScopeSummary(data)\n  };\n};\n\n// Main function\nconst buildScopeSummaryData = () => {\n  try {\n    const scopeSummary = buildScopeSummary(projectData);\n    const detailedSummary = generateDetailedSummary(projectData);\n    const smsSummary = generateSMSSummary(projectData);\n    const emailSummary = generateEmailSummary(projectData);\n    const contractSummary = generateContractSummary(projectData);\n    const notificationPayload = generateNotificationPayload(projectData);\n    \n    return {\n      scopeSummary,\n      detailedSummary,\n      smsSummary,\n      emailSummary,\n      contractSummary,\n      notificationPayload,\n      timestamp: new Date().toISOString(),\n      callSid: callSid,\n      success: true\n    };\n    \n  } catch (error) {\n    console.error('Error building scope summary:', error);\n    return {\n      error: 'SCOPE_SUMMARY_ERROR',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      callSid: callSid,\n      success: false\n    };\n  }\n};\n\n// Execute and return results\nreturn buildScopeSummaryData();"
  },
  "typeVersion": 1,
  "position": [500, 300],
  "id": "build-scope-summary-node"
} 