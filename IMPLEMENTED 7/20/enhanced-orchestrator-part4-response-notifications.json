{
  "name": "Enhanced Voice Intake - Part 4: Response & Notifications",
  "nodes": [
    {
      "name": "Construct TwiML Response",
      "type": "n8n-nodes-base.function",
      "parameters": {
        "functionCode": "// Function Node: Construct TwiML Response\n// Input: $json.conversationState, $json.message, $json.callerInfo, $json.followUpQuestion\n// Output: TwiML response for Twilio\n\nconst conversationState = $json.conversationState;\nconst message = $json.message;\nconst callerInfo = $json.callerInfo || $json.callerDirectory?.callerInfo;\nconst followUpQuestion = $json.followUpQuestion;\nconst extractedData = $json.extractedData;\nconst hasFollowUp = $json.hasFollowUp;\nconst isReturningCaller = $json.isReturningCaller || $json.callerDirectory?.isReturningCaller;\nconst callSid = $json.callSid || $json.CallSid;\n\n// SSML voice configuration\nconst voiceConfig = {\n  voice: 'alice',\n  language: 'en-US',\n  rate: 'medium',\n  pitch: 'medium',\n  volume: 'medium'\n};\n\n// SSML formatting functions\nconst ssml = {\n  // Add pauses\n  pause: (duration = '1s') => `<break time=\"${duration}\"/>`,\n  \n  // Emphasize text\n  emphasize: (text, level = 'moderate') => `<emphasis level=\"${level}\">${text}</emphasis>`,\n  \n  // Say numbers clearly\n  sayNumber: (number) => `<say-as interpret-as=\"cardinal\">${number}</say-as>`,\n  \n  // Say currency\n  sayCurrency: (amount) => `<say-as interpret-as=\"currency\">${amount}</say-as>`,\n  \n  // Say dates\n  sayDate: (date) => `<say-as interpret-as=\"date\">${date}</say-as>`,\n  \n  // Say phone numbers\n  sayPhone: (phone) => `<say-as interpret-as=\"telephone\">${phone}</say-as>`,\n  \n  // Format address\n  formatAddress: (address) => {\n    if (!address) return '';\n    return address.replace(/(\\d+)/g, '<say-as interpret-as=\"cardinal\">$1</say-as>');\n  },\n  \n  // Format project details\n  formatProjectDetails: (data) => {\n    if (!data) return '';\n    \n    const parts = [];\n    \n    if (data.project_type) {\n      parts.push(`a ${data.project_type}`);\n    }\n    \n    if (data.project_address) {\n      parts.push(`at ${ssml.formatAddress(data.project_address)}`);\n    }\n    \n    if (data.budget) {\n      parts.push(`with a budget of ${ssml.sayCurrency(data.budget)}`);\n    }\n    \n    return parts.join(', ');\n  }\n};\n\n// Base TwiML template with SSML support\nconst createTwiML = (message, gatherOptions = {}) => {\n  const defaultGather = {\n    input: 'speech',\n    timeout: 10,\n    speechTimeout: 'auto',\n    action: '/webhook/process-speech',\n    method: 'POST',\n    language: 'en-US'\n  };\n  \n  const gather = { ...defaultGather, ...gatherOptions };\n  \n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n  <Say voice=\"${voiceConfig.voice}\" language=\"${voiceConfig.language}\">\n    ${message}\n  </Say>\n  <Gather input=\"${gather.input}\" \n          timeout=\"${gather.timeout}\" \n          speechTimeout=\"${gather.speechTimeout}\"\n          action=\"${gather.action}\" \n          method=\"${gather.method}\"\n          language=\"${gather.language}\">\n    <Say voice=\"${voiceConfig.voice}\" language=\"${voiceConfig.language}\">\n      I didn't catch that. Could you repeat?\n    </Say>\n  </Gather>\n  <Say voice=\"${voiceConfig.voice}\" language=\"${voiceConfig.language}\">\n    Thanks for calling. We'll follow up with you soon.\n  </Say>\n  <Hangup/>\n</Response>`;\n};\n\n// Response templates for different scenarios\nconst responseTemplates = {\n  // Initial greeting for new callers\n  newCallerGreeting: () => {\n    const welcomeMessage = callerInfo?.welcomeMessage || \"What's the name of your business?\";\n    const message = `Hi! I'm here to help you generate a construction contract. ${ssml.pause('0.5s')} ${welcomeMessage}`;\n    return createTwiML(message);\n  },\n  \n  // Welcome back for returning callers\n  returningCallerGreeting: () => {\n    const businessName = callerInfo?.businessName;\n    const welcomeMessage = callerInfo?.welcomeMessage || \"Welcome back! How can I help you today?\";\n    \n    let message = `Welcome back!`;\n    \n    if (businessName) {\n      message += ` ${ssml.pause('0.3s')} Should we still send this to ${ssml.emphasize(businessName)}?`;\n    } else {\n      message += ` ${ssml.pause('0.3s')} ${welcomeMessage}`;\n    }\n    \n    return createTwiML(message);\n  },\n  \n  // Follow-up question with context\n  followUpQuestion: () => {\n    const question = followUpQuestion || \"Could you provide more details about your project?\";\n    const projectDetails = extractedData ? ssml.formatProjectDetails(extractedData) : '';\n    \n    let message = '';\n    \n    if (projectDetails) {\n      message = `I have ${projectDetails}. ${ssml.pause('0.5s')} ${question}`;\n    } else {\n      message = question;\n    }\n    \n    return createTwiML(message);\n  },\n  \n  // Contact method confirmation for returning callers\n  contactConfirmation: () => {\n    const contactMethod = callerInfo?.preferredContact;\n    const businessName = callerInfo?.businessName;\n    \n    let message = '';\n    \n    if (contactMethod && businessName) {\n      message = `Still OK to send the contract to ${ssml.emphasize(contactMethod)} for ${ssml.emphasize(businessName)}?`;\n    } else if (contactMethod) {\n      message = `Still OK to send the contract to ${ssml.emphasize(contactMethod)}?`;\n    } else {\n      message = \"What's the best way to get this contract to you — text or email?\";\n    }\n    \n    return createTwiML(message);\n  },\n  \n  // Contact method question for new callers\n  contactQuestion: () => {\n    const question = callerInfo?.contactQuestion || \"What's the best way to get this contract to you — text or email?\";\n    return createTwiML(question);\n  },\n  \n  // Completion message with project summary\n  completion: () => {\n    const projectType = extractedData?.project_type || 'project';\n    const projectDetails = ssml.formatProjectDetails(extractedData);\n    \n    let message = `Perfect! ${ssml.pause('0.3s')} I've got all the details for your ${ssml.emphasize(projectType)} project.`;\n    \n    if (projectDetails) {\n      message += ` ${ssml.pause('0.5s')} ${projectDetails}.`;\n    }\n    \n    message += ` ${ssml.pause('0.5s')} I'll generate the contract and send it to you right away. ${ssml.pause('0.3s')} Thanks for calling!`;\n    \n    return createTwiML(message, { action: '/webhook/end-call' });\n  },\n  \n  // Error handling with recovery options\n  error: (errorMessage = \"I'm having trouble processing that. Let me start over.\") => {\n    const message = `${errorMessage} ${ssml.pause('0.5s')} Could you try again?`;\n    return createTwiML(message, { action: '/webhook/restart' });\n  },\n  \n  // Budget clarification\n  budgetClarification: () => {\n    const message = `Could you clarify the budget? ${ssml.pause('0.3s')} For example, say something like \"The budget is ${ssml.sayCurrency('$25,000')}\" or \"We're looking to spend around ${ssml.sayCurrency('$15,000')}.\"`;\n    return createTwiML(message);\n  },\n  \n  // Address clarification\n  addressClarification: () => {\n    const message = `Could you provide the project address? ${ssml.pause('0.3s')} Please include the street number, street name, city, and state.`;\n    return createTwiML(message);\n  },\n  \n  // Payment terms clarification\n  paymentTermsClarification: () => {\n    const message = `How would you like to structure the payments? ${ssml.pause('0.3s')} For example, you could say \"50% upfront and 50% on completion\" or \"Monthly payments of ${ssml.sayCurrency('$5,000')}.\"`;\n    return createTwiML(message);\n  },\n  \n  // Start date clarification\n  startDateClarification: () => {\n    const message = `When would you like to start this project? ${ssml.pause('0.3s')} You can say something like \"Next month\" or \"As soon as possible\" or give me a specific date.`;\n    return createTwiML(message);\n  }\n};\n\n// Smart response selection based on conversation state and context\nconst selectResponse = () => {\n  // Handle specific follow-up scenarios\n  if (hasFollowUp && followUpQuestion) {\n    const missingField = $json.missingField;\n    \n    // Route to specific clarification templates\n    switch (missingField) {\n      case 'budget':\n        return responseTemplates.budgetClarification();\n      case 'project_address':\n        return responseTemplates.addressClarification();\n      case 'payment_terms':\n        return responseTemplates.paymentTermsClarification();\n      case 'start_date':\n        return responseTemplates.startDateClarification();\n      default:\n        return responseTemplates.followUpQuestion();\n    }\n  }\n  \n  // Handle conversation states\n  switch (conversationState) {\n    case 'new_caller':\n      return responseTemplates.newCallerGreeting();\n      \n    case 'returning_caller':\n      return responseTemplates.returningCallerGreeting();\n      \n    case 'follow_up':\n      return responseTemplates.followUpQuestion();\n      \n    case 'contact_confirmation':\n      return responseTemplates.contactConfirmation();\n      \n    case 'contact_question':\n      return responseTemplates.contactQuestion();\n      \n    case 'complete':\n      return responseTemplates.completion();\n      \n    case 'error':\n      return responseTemplates.error();\n      \n    default:\n      // Fallback logic based on available data\n      if (isReturningCaller) {\n        return responseTemplates.returningCallerGreeting();\n      } else if (hasFollowUp) {\n        return responseTemplates.followUpQuestion();\n      } else {\n        return responseTemplates.newCallerGreeting();\n      }\n  }\n};\n\n// Generate the TwiML response\nconst generateTwiMLResponse = () => {\n  try {\n    const twiML = selectResponse();\n    \n    return {\n      twiML,\n      conversationState,\n      callerInfo,\n      followUpQuestion,\n      hasFollowUp,\n      isReturningCaller,\n      extractedData,\n      callSid,\n      timestamp: new Date().toISOString(),\n      voiceConfig,\n      success: true\n    };\n    \n  } catch (error) {\n    console.error('Error generating TwiML response:', error);\n    \n    // Fallback to error response\n    const fallbackTwiML = responseTemplates.error();\n    \n    return {\n      twiML: fallbackTwiML,\n      conversationState: 'error',\n      error: 'TWiML_GENERATION_ERROR',\n      message: error.message,\n      callSid,\n      timestamp: new Date().toISOString(),\n      success: false\n    };\n  }\n};\n\n// Execute and return the TwiML response\nreturn generateTwiMLResponse();"
      },
      "typeVersion": 1,
      "position": [240, 300],
      "id": "construct-twiml-response"
    },
    {
      "name": "Send SMS Notification",
      "type": "n8n-nodes-base.twilio",
      "parameters": {
        "authentication": "twilioApi",
        "resource": "sms",
        "operation": "send",
        "from": "{{ $env.TWILIO_PHONE_NUMBER }}",
        "to": "{{ $env.FOUNDER_PHONE_NUMBER }}",
        "body": "{{ $json.smsSummary }}"
      },
      "typeVersion": 1,
      "position": [460, 200],
      "id": "send-sms-notification"
    },
    {
      "name": "Send Email Notification",
      "type": "n8n-nodes-base.emailSend",
      "parameters": {
        "authentication": "smtp",
        "fromEmail": "{{ $env.NOTIFICATION_EMAIL }}",
        "toEmail": "{{ $env.FOUNDER_EMAIL }}",
        "subject": "New Construction Contract Request - {{ $json.notificationPayload.caller.business }}",
        "text": "{{ $json.emailSummary }}",
        "html": "{{ $json.emailSummary.replace(/\\n/g, '<br>') }}"
      },
      "typeVersion": 1,
      "position": [460, 400],
      "id": "send-email-notification"
    },
    {
      "name": "Log to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "parameters": {
        "authentication": "googleSheetsOAuth2Api",
        "operation": "append",
        "sheetId": "{{ $env.GOOGLE_SHEETS_ID }}",
        "range": "Engine!A:Z",
        "valueInputOption": "RAW",
        "dataToSendOnUpdate": {
          "values": [
            [
              "{{ $json.notificationPayload.timestamp }}",
              "{{ $json.notificationPayload.callSid }}",
              "{{ $json.notificationPayload.caller.phone }}",
              "{{ $json.notificationPayload.caller.business }}",
              "{{ $json.notificationPayload.caller.contactMethod }}",
              "{{ $json.notificationPayload.caller.isReturning }}",
              "{{ $json.notificationPayload.project.type }}",
              "{{ $json.notificationPayload.project.address }}",
              "{{ $json.notificationPayload.project.budget }}",
              "{{ $json.notificationPayload.project.paymentTerms }}",
              "{{ $json.notificationPayload.scopeSummary }}",
              "{{ $json.complianceResults.complianceStatus }}",
              "{{ $json.complianceResults.complianceScore }}",
              "{{ $json.complianceResults.warnings.join('; ') }}"
            ]
          ]
        }
      },
      "typeVersion": 1,
      "position": [680, 300],
      "id": "log-to-sheets"
    },
    {
      "name": "HTTP Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "parameters": {
        "respondWith": "text",
        "responseBody": "{{ $json.twiML }}",
        "responseHeaders": {
          "Content-Type": "application/xml"
        }
      },
      "typeVersion": 1,
      "position": [900, 300],
      "id": "http-response"
    }
  ],
  "connections": {
    "Construct TwiML Response": {
      "main": [
        [
          {
            "node": "Send SMS Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Email Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send SMS Notification": {
      "main": [
        [
          {
            "node": "HTTP Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Notification": {
      "main": [
        [
          {
            "node": "HTTP Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Google Sheets": {
      "main": [
        [
          {
            "node": "HTTP Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "id": "enhanced-orchestrator-part4"
} 